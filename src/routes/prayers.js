const express = require("express");
const { bibleDB } = require("../config");
const authMiddleware = require("../middleware/auth");
const router = express.Router();

// Áî®Êà∑Êèê‰∫§ `prayer`
router.post("/", authMiddleware, async (req, res) => {
    const connection = await bibleDB.getConnection();
    try {
        const { title, content, is_private, verses } = req.body;
        const userId = req.user?.id; // Ëé∑Âèñ JWT Áî®Êà∑ ID

        if (!userId) {
            return res.status(401).json({ error: "Unauthorized: Invalid user" });
        }

        if (!title || !content || typeof is_private === "undefined" || !Array.isArray(verses)) {
            return res.status(400).json({ error: "Missing required parameters" });
        }

        await connection.beginTransaction(); // üöÄ ÂºÄÂßã‰∫ãÂä°

        // **ÊèíÂÖ• `prayers`**
        const sqlPrayer = `INSERT INTO prayers (title, content, userId, is_private) VALUES (?, ?, ?, ?)`;
        const [result] = await connection.execute(sqlPrayer, [title, content, userId, is_private ? 1 : 0]);
        const prayerId = result.insertId;

        // **ÊâπÈáèÊèíÂÖ• `prayer_bible`ÔºàÂáèÂ∞ë SQL Ë∞ÉÁî®Ôºâ**
        if (verses.length > 0) {
            const values = verses.map(v => `(${prayerId}, '${v.version}', ${v.b}, ${v.c}, ${v.v})`).join(", ");
            const sqlBible = `INSERT INTO prayer_bible (prayerId, version, b, c, v) VALUES ${values}`;
            await connection.execute(sqlBible);
        }

        await connection.commit(); // ‚úÖ Êèê‰∫§‰∫ãÂä°
        res.json({ message: "Prayer submitted", prayerId });
    } catch (error) {
        await connection.rollback(); // ‚ùå ÂèëÁîüÈîôËØØÂõûÊªö
        console.error("‚ùå Error inserting prayer:", error);
        res.status(500).json({ error: "Server error" });
    } finally {
        connection.release();
    }
});
// üìå ÈÄöËøáÁî®Êà∑ ID Ëé∑ÂèñËØ•Áî®Êà∑ÁöÑÊâÄÊúâÂÖ¨ÂºÄÁ•∑ÊñáÔºàÂåÖÊã¨ÂÖ≥ËÅîÁöÑÁªèÊñáÔºâ
router.get("/user/:userId", async (req, res) => {
    try {
        const { userId } = req.params;
        
        // üü¢ Ê£ÄÊü• userId ÊòØÂê¶ÊòØÊï∞Â≠ó
        if (isNaN(userId)) {
            return res.status(400).json({ error: "Invalid user ID" });
        }

        // üü¢ Êü•ËØ¢ÂÖ¨ÂºÄÁ•∑Êñá & ÂÖ≥ËÅîÁöÑÁªèÊñá
        const sql = `
            SELECT p.id, p.title, p.content, p.is_private, p.created_at, u.username,
                   pb.version, pb.b, pb.c, pb.v, b.t AS bibleText
            FROM prayers p
            JOIN users u ON p.userId = u.id
            LEFT JOIN prayer_bible pb ON p.id = pb.prayer_id
            LEFT JOIN (
                SELECT 't_kjv' AS version, b, c, v, t FROM t_kjv
                UNION ALL
                SELECT 't_cn', b, c, v, t FROM t_cn
            ) b ON pb.version = b.version AND pb.b = b.b AND pb.c = b.c AND pb.v = b.v
            WHERE p.userId = ? AND p.is_private = FALSE
            ORDER BY p.created_at DESC`;

        const [rows] = await bibleDB.execute(sql, [userId]);

        // üü¢ Â§ÑÁêÜÊü•ËØ¢ÁªìÊûúÔºåÂêàÂπ∂Áõ∏ÂêåÁöÑÁ•∑Êñá ID
        const prayers = {};
        rows.forEach(row => {
            if (!prayers[row.id]) {
                prayers[row.id] = {
                    id: row.id,
                    title: row.title,
                    content: row.content,
                    is_private: row.is_private,
                    created_at: row.created_at,
                    username: row.username,
                    verses: []
                };
            }
            if (row.bibleText) {
                prayers[row.id].verses.push({
                    version: row.version,
                    b: row.b,
                    c: row.c,
                    v: row.v,
                    text: row.bibleText
                });
            }
        });

        res.json({ prayers: Object.values(prayers) });

    } catch (error) {
        console.error("‚ùå Error fetching user's public prayers:", error);
        res.status(500).json({ error: "Server error" });
    }
});


// Ëé∑ÂèñÊâÄÊúâ `prayers`ÔºàÂÖ¨ÂºÄÁöÑ + ÂΩìÂâçÁî®Êà∑ÁöÑÁßÅÂØÜ `prayers`Ôºâ
router.get("/", authMiddleware, async (req, res) => {
    try {
        const userId = req.user.id; // ÂΩìÂâçÁî®Êà∑ ID

        // **Êü•ËØ¢ÊâÄÊúâÂÖ¨ÂºÄ `prayers` ÂíåÂΩìÂâçÁî®Êà∑ÁöÑÁßÅÂØÜ `prayers`**
        const sql = `
            SELECT p.id, p.title, p.content, p.is_private, p.created_at, u.username,
                   pb.version, pb.b, pb.c, pb.v, b.t AS bibleText
            FROM prayers p
            JOIN users u ON p.userId = u.id
            LEFT JOIN prayer_bible pb ON p.id = pb.prayerId
            LEFT JOIN (
                SELECT 't_kjv' AS version, b, c, v, t FROM t_kjv
                UNION ALL
                SELECT 't_cn', b, c, v, t FROM t_cn
            ) b ON pb.version = b.version AND pb.b = b.b AND pb.c = b.c AND pb.v = b.v
            WHERE p.is_private = FALSE OR p.userId = ?
            ORDER BY p.created_at DESC`;

        const [rows] = await bibleDB.execute(sql, [userId]);

        // **Ê†ºÂºèÂåñÁªìÊûú**
        const prayers = {};
        rows.forEach(row => {
            if (!prayers[row.id]) {
                prayers[row.id] = {
                    id: row.id,
                    title: row.title,
                    content: row.content,
                    is_private: Boolean(row.is_private), // ‚úÖ ËΩ¨Êç¢ `0/1` ‰∏∫ `true/false`
                    created_at: row.created_at,
                    username: row.username,
                    verses: []
                };
            }
            if (row.bibleText) {
                prayers[row.id].verses.push({
                    version: row.version,
                    b: row.b,
                    c: row.c,
                    v: row.v,
                    text: row.bibleText
                });
            }
        });

        res.json({ prayers: Object.values(prayers) });
    } catch (error) {
        console.error("‚ùå Error fetching prayers:", error);
        res.status(500).json({ error: "Server error" });
    }
});

//  Ëé∑ÂèñÂΩìÂâçÁî®Êà∑Ëá™Â∑±ÁöÑ `prayers`
router.get("/mine", authMiddleware, async (req, res) => {
    try {
        const userId = req.user.id; // ÂΩìÂâçÁî®Êà∑ ID

        const sql = `
            SELECT p.id, p.title, p.content, p.is_private, p.created_at, u.username,
                   pb.version, pb.b, pb.c, pb.v, b.t AS bibleText
            FROM prayers p
            JOIN users u ON p.userId = u.id
            LEFT JOIN prayer_bible pb ON p.id = pb.prayerId
            LEFT JOIN (
                SELECT 't_kjv' AS version, b, c, v, t FROM t_kjv
                UNION ALL
                SELECT 't_cn', b, c, v, t FROM t_cn
            ) b ON pb.version = b.version AND pb.b = b.b AND pb.c = b.c AND pb.v = b.v
            WHERE p.userId = ?
            ORDER BY p.created_at DESC`;

        const [rows] = await bibleDB.execute(sql, [userId]);

        const prayers = {};
        rows.forEach(row => {
            if (!prayers[row.id]) {
                prayers[row.id] = {
                    id: row.id,
                    title: row.title,
                    content: row.content,
                    is_private: Boolean(row.is_private), // ‚úÖ ËΩ¨Êç¢ `0/1` ‰∏∫ `true/false`
                    created_at: row.created_at,
                    username: row.username,
                    verses: []
                };
            }
            if (row.bibleText) {
                prayers[row.id].verses.push({
                    version: row.version,
                    b: row.b,
                    c: row.c,
                    v: row.v,
                    text: row.bibleText
                });
            }
        });

        res.json({ prayers: Object.values(prayers) });
    } catch (error) {
        console.error("‚ùå Error fetching prayers:", error);
        res.status(500).json({ error: "Server error" });
    }
});

// ÁºñËæëËá™Â∑±ÁöÑÁ•∑Êñá
router.put("/:prayerId", authMiddleware, async (req, res) => {
    const connection = await bibleDB.getConnection();
    try {
        const { prayerId } = req.params;
        const userId = req.user.id;
        const { title, content, is_private, verses } = req.body;

        // Ê£ÄÊü•ÂøÖÂ°´Â≠óÊÆµ
        if (!title || !content || typeof is_private === "undefined" || !Array.isArray(verses)) {
            return res.status(400).json({ error: "Missing required parameters" });
        }

        await connection.beginTransaction();

        // Ê£ÄÊü•ËØ•Á•∑ÊñáÊòØÂê¶Â≠òÂú®‰∏îÂΩíÂΩìÂâçÁî®Êà∑ÊâÄÊúâ
        const [rows] = await connection.execute("SELECT userId FROM prayers WHERE id = ?", [prayerId]);
        if (rows.length === 0) {
            await connection.rollback();
            return res.status(404).json({ error: "Prayer not found" });
        }
        if (rows[0].userId !== userId) {
            await connection.rollback();
            return res.status(403).json({ error: "Unauthorized: You can only edit your own prayer" });
        }

        // Êõ¥Êñ∞Á•∑ÊñáÂü∫Êú¨‰ø°ÊÅØ
        const sqlUpdatePrayer = "UPDATE prayers SET title = ?, content = ?, is_private = ? WHERE id = ?";
        await connection.execute(sqlUpdatePrayer, [title, content, is_private ? 1 : 0, prayerId]);

        // Âà†Èô§ÂéüÊúâÂÖ≥ËÅîÁªèÊñá
        await connection.execute("DELETE FROM prayer_bible WHERE prayerId = ?", [prayerId]);

        // ÊèíÂÖ•Êñ∞ÁöÑÂÖ≥ËÅîÁªèÊñáÔºàÂ¶ÇÊûúÊúâÔºâ
        if (verses.length > 0) {
            const values = verses.map(v => `(${prayerId}, '${v.version}', ${v.b}, ${v.c}, ${v.v})`).join(", ");
            const sqlBible = `INSERT INTO prayer_bible (prayerId, version, b, c, v) VALUES ${values}`;
            await connection.execute(sqlBible);
        }

        await connection.commit();
        res.json({ message: "Prayer updated successfully" });
    } catch (error) {
        await connection.rollback();
        console.error("‚ùå Error updating prayer:", error);
        res.status(500).json({ error: "Server error" });
    } finally {
        connection.release();
    }
});

// Âà†Èô§Ëá™Â∑±ÁöÑÁ•∑Êñá
router.delete("/:prayerId", authMiddleware, async (req, res) => {
    const connection = await bibleDB.getConnection();
    try {
        const { prayerId } = req.params;
        const userId = req.user.id;

        await connection.beginTransaction();

        // Ê£ÄÊü•ËØ•Á•∑ÊñáÊòØÂê¶Â≠òÂú®‰∏îÂΩíÂΩìÂâçÁî®Êà∑ÊâÄÊúâ
        const [rows] = await connection.execute("SELECT userId FROM prayers WHERE id = ?", [prayerId]);
        if (rows.length === 0) {
            await connection.rollback();
            return res.status(404).json({ error: "Prayer not found" });
        }
        if (rows[0].userId !== userId) {
            await connection.rollback();
            return res.status(403).json({ error: "Unauthorized: You can only delete your own prayer" });
        }

        // ÂÖàÂà†Èô§ÂÖ≥ËÅîÁªèÊñáÔºåÂÜçÂà†Èô§Á•∑Êñá
        await connection.execute("DELETE FROM prayer_bible WHERE prayerId = ?", [prayerId]);
        await connection.execute("DELETE FROM prayers WHERE id = ?", [prayerId]);

        await connection.commit();
        res.json({ message: "Prayer deleted successfully" });
    } catch (error) {
        await connection.rollback();
        console.error("‚ùå Error deleting prayer:", error);
        res.status(500).json({ error: "Server error" });
    } finally {
        connection.release();
    }
});

//  Áªô`prayer`ËøõË°åÁÇπËµû
router.post("/:prayerId/like", authMiddleware, async (req, res) => {
    try {
        const { prayerId } = req.params;
        const userId = req.user.id;

        // Ê£ÄÊü•Áî®Êà∑ÊòØÂê¶Â∑≤ÁªèÁÇπËµû
        const [existingLike] = await bibleDB.execute(
            "SELECT id FROM prayer_likes WHERE prayer_id = ? AND user_id = ?",
            [prayerId, userId]
        );
        if (existingLike.length > 0) {
            return res.status(400).json({ error: "You have already liked this prayer" });
        }

        // ÊèíÂÖ•ÁÇπËµû
        await bibleDB.execute(
            "INSERT INTO prayer_likes (prayer_id, user_id) VALUES (?, ?)",
            [prayerId, userId]
        );

        res.json({ message: "Prayer liked successfully!" });
    } catch (error) {
        console.error("‚ùå Error liking prayer:", error);
        res.status(500).json({ error: "Server error" });
    }
});

// ÂèñÊ∂à`prayer`ÁÇπËµû
router.delete("/:prayerId/unlike", authMiddleware, async (req, res) => {
    try {
        const { prayerId } = req.params;
        const userId = req.user.id;

        await bibleDB.execute(
            "DELETE FROM prayer_likes WHERE prayer_id = ? AND user_id = ?",
            [prayerId, userId]
        );

        res.json({ message: "Prayer unliked successfully!" });
    } catch (error) {
        console.error("‚ùå Error unliking prayer:", error);
        res.status(500).json({ error: "Server error" });
    }
});
// Ëé∑Âèñ`prayer`ÁöÑÁÇπËµûÊï∞
router.get("/:prayerId/likes", async (req, res) => {
    try {
        const { prayerId } = req.params;

        const [likes] = await bibleDB.execute(
            "SELECT COUNT(*) AS like_count FROM prayer_likes WHERE prayer_id = ?",
            [prayerId]
        );

        res.json({ likeCount: likes[0].like_count });
    } catch (error) {
        console.error("‚ùå Error fetching likes:", error);
        res.status(500).json({ error: "Server error" });
    }
});

// Âà§Êñ≠ÊåáÂÆöÁöÑÁî®Êà∑ÊòØÂê¶ÁÇπËµû‰∫ÜÊåáÂÆöÁöÑ prayer
router.get("/:prayerId/isliked/:userId", async (req, res) => {
    try {
      const { prayerId, userId } = req.params;
      
      // ÂèØÈÄâÔºöÊ£ÄÊü•ÂèÇÊï∞ÊòØÂê¶‰∏∫Êï∞Â≠ó
      if (isNaN(prayerId) || isNaN(userId)) {
        return res.status(400).json({ error: "Invalid parameters" });
      }
  
      // Êü•ËØ¢ÊåáÂÆöÁî®Êà∑ÊòØÂê¶Â∑≤ÁÇπËµûËØ•Á•∑Êñá
      const [rows] = await bibleDB.execute(
        "SELECT COUNT(*) AS count FROM prayer_likes WHERE prayer_id = ? AND user_id = ?",
        [prayerId, userId]
      );
  
      // Â¶ÇÊûú count > 0 ÂàôË°®Á§∫Áî®Êà∑Â∑≤ÁªèÁÇπËµû‰∫Ü
      const liked = rows[0].count > 0;
      res.json({ liked });
    } catch (error) {
      console.error("‚ùå Error checking like status:", error);
      res.status(500).json({ error: "Server error" });
    }
  });
  
// ÂèëË°®`prayer`ÁöÑËØÑËÆ∫
router.post("/:prayerId/comment", authMiddleware, async (req, res) => {
    try {
        const { prayerId } = req.params;
        const { content } = req.body;
        const userId = req.user.id;

        if (!content) {
            return res.status(400).json({ error: "Comment content cannot be empty" });
        }

        await bibleDB.execute(
            "INSERT INTO prayer_comments (prayer_id, user_id, content) VALUES (?, ?, ?)",
            [prayerId, userId, content]
        );

        res.json({ message: "Comment added successfully!" });
    } catch (error) {
        console.error("‚ùå Error adding comment:", error);
        res.status(500).json({ error: "Server error" });
    }
});

// Ëé∑Âèñ`prayer`ÁöÑËØÑËÆ∫
router.get("/:prayerId/comments", async (req, res) => {
    try {
        const { prayerId } = req.params;

        const [comments] = await bibleDB.execute(
            `SELECT c.id, c.content, c.created_at, u.username, u.avatar 
             FROM prayer_comments c
             JOIN users u ON c.user_id = u.id
             WHERE c.prayer_id = ?
             ORDER BY c.created_at ASC`,
            [prayerId]
        );

        res.json({ comments });
    } catch (error) {
        console.error("‚ùå Error fetching comments:", error);
        res.status(500).json({ error: "Server error" });
    }
});
// ÁºñËæëËØÑËÆ∫ÔºöÂè™ÊúâËØÑËÆ∫ÁöÑ‰ΩúËÄÖÂèØ‰ª•ÁºñËæëËØÑËÆ∫
router.put("/:prayerId/comment/:commentId", authMiddleware, async (req, res) => {
    try {
        const { prayerId, commentId } = req.params;
        const userId = req.user.id;
        const { content } = req.body;

        if (!content) {
            return res.status(400).json({ error: "ËØÑËÆ∫ÂÜÖÂÆπ‰∏çËÉΩ‰∏∫Á©∫" });
        }

        // Ëé∑ÂèñËØÑËÆ∫‰ø°ÊÅØ
        const [rows] = await bibleDB.execute(
            "SELECT * FROM prayer_comments WHERE id = ? AND prayer_id = ?",
            [commentId, prayerId]
        );
        if (rows.length === 0) {
            return res.status(404).json({ error: "Êú™ÊâæÂà∞ÂØπÂ∫îËØÑËÆ∫" });
        }
        const comment = rows[0];

        // Ê£ÄÊü•ÂΩìÂâçÁî®Êà∑ÊòØÂê¶‰∏∫ËØÑËÆ∫‰ΩúËÄÖÔºàÈÄöËøá user_id ÊØîËæÉÔºâ
        if (comment.user_id !== userId) {
            return res.status(403).json({ error: "ÊÇ®Âè™ËÉΩÁºñËæëËá™Â∑±ÁöÑËØÑËÆ∫" });
        }

        // Êõ¥Êñ∞ËØÑËÆ∫ÂÜÖÂÆπ
        await bibleDB.execute(
            "UPDATE prayer_comments SET content = ? WHERE id = ?",
            [content, commentId]
        );
        res.json({ message: "ËØÑËÆ∫Êõ¥Êñ∞ÊàêÂäü" });
    } catch (error) {
        console.error("‚ùå Error updating comment:", error);
        res.status(500).json({ error: "ÊúçÂä°Âô®ÈîôËØØ" });
    }
});

// Âà†Èô§ËØÑËÆ∫ÔºöËØÑËÆ∫‰ΩúËÄÖÂèØ‰ª•Âà†Èô§Ëá™Â∑±ÁöÑËØÑËÆ∫ÔºõÂêåÊó∂Â¶ÇÊûúÁôªÂΩïÁî®Êà∑ÊòØËØ•Á•∑ÊñáÁöÑ‰ΩúËÄÖÔºåÂèØ‰ª•Âà†Èô§ËØ•Á•∑Êñá‰∏ãÁöÑ‰ªªÊÑèËØÑËÆ∫
router.delete("/:prayerId/comment/:commentId", authMiddleware, async (req, res) => {
    try {
        const { prayerId, commentId } = req.params;
        const userId = req.user.id;

        // Ëé∑ÂèñËØÑËÆ∫‰ø°ÊÅØ
        const [commentRows] = await bibleDB.execute(
            "SELECT * FROM prayer_comments WHERE id = ? AND prayer_id = ?",
            [commentId, prayerId]
        );
        if (commentRows.length === 0) {
            return res.status(404).json({ error: "Êú™ÊâæÂà∞ÂØπÂ∫îËØÑËÆ∫" });
        }
        const comment = commentRows[0];

        // ÂàùÊ≠•Âà§Êñ≠ÔºöÂ¶ÇÊûúËØÑËÆ∫ÁöÑ‰ΩúËÄÖ‰∏∫ÂΩìÂâçÁî®Êà∑ÔºåÂàôÂÖÅËÆ∏Âà†Èô§
        let authorized = (comment.user_id === userId);

        // Â¶ÇÊûúÂΩìÂâçÁî®Êà∑‰∏çÊòØËØÑËÆ∫‰ΩúËÄÖÔºåËøõ‰∏ÄÊ≠•Ê£ÄÊü•ÂΩìÂâçÁî®Êà∑ÊòØÂê¶‰∏∫ËØ•Á•∑ÊñáÁöÑ‰ΩúËÄÖ
        if (!authorized) {
            const [prayerRows] = await bibleDB.execute(
                "SELECT userId FROM prayers WHERE id = ?",
                [prayerId]
            );
            if (prayerRows.length === 0) {
                return res.status(404).json({ error: "Êú™ÊâæÂà∞ÂØπÂ∫îÁ•∑Êñá" });
            }
            if (prayerRows[0].userId === userId) {
                authorized = true;
            }
        }

        if (!authorized) {
            return res.status(403).json({ error: "ÊÇ®Êó†ÊùÉÂà†Èô§ËØ•ËØÑËÆ∫" });
        }

        // Âà†Èô§ËØÑËÆ∫
        await bibleDB.execute("DELETE FROM prayer_comments WHERE id = ?", [commentId]);
        res.json({ message: "ËØÑËÆ∫Âà†Èô§ÊàêÂäü" });
    } catch (error) {
        console.error("‚ùå Error deleting comment:", error);
        res.status(500).json({ error: "ÊúçÂä°Âô®ÈîôËØØ" });
    }
});
// Âà§Êñ≠ËØÑËÆ∫ÊòØÂê¶ÂèØ‰ª•Âà†Èô§ÁöÑ APIÔºà‰ªÖÈôêÁôªÂΩïÁî®Êà∑‰ΩøÁî®Ôºâ
router.get("/:prayerId/comment/:commentId/candelete", authMiddleware, async (req, res) => {
    const currentUserId = req.user.id;
    const { prayerId, commentId } = req.params;

    try {
        // Ëé∑ÂèñËØÑËÆ∫ËÆ∞ÂΩï
        const [commentRows] = await bibleDB.execute(
            "SELECT * FROM prayer_comments WHERE id = ? AND prayer_id = ?",
            [commentId, prayerId]
        );
        if (commentRows.length === 0) {
            return res.json({ canDelete: false });
        }
        const comment = commentRows[0];

        // Â¶ÇÊûúÂΩìÂâçÁî®Êà∑ÊòØËØÑËÆ∫ÁöÑ‰ΩúËÄÖÔºåÂàôÂÖÅËÆ∏Âà†Èô§
        if (comment.user_id === currentUserId) {
            return res.json({ canDelete: true });
        }

        // Â¶ÇÊûúÂΩìÂâçÁî®Êà∑ÊòØËØ•Á•∑ÊñáÁöÑ‰ΩúËÄÖÔºåÂàôÂÖÅËÆ∏Âà†Èô§ÊâÄÊúâËØÑËÆ∫
        const [prayerRows] = await bibleDB.execute(
            "SELECT userId FROM prayers WHERE id = ?",
            [prayerId]
        );
        if (prayerRows.length > 0 && prayerRows[0].userId === currentUserId) {
            return res.json({ canDelete: true });
        }

        // ÂÖ∂‰ªñÊÉÖÂÜµËøîÂõû false
        return res.json({ canDelete: false });
    } catch (error) {
        console.error("‚ùå Error checking comment deletion permission:", error);
        res.status(500).json({ error: "ÊúçÂä°Âô®ÈîôËØØ" });
    }
});

// ‚úÖ Ëé∑ÂèñÊâÄÊúâÂÖ¨ÂºÄÁ•∑ÊñáÔºàÊó†ÈúÄË∫´‰ªΩÈ™åËØÅÔºâ
router.get("/public", async (req, res) => {
    try {
      const sql = `
        SELECT p.id, p.title, p.content, p.is_private, p.created_at, u.username,
               pb.version, pb.b, pb.c, pb.v, b.t AS bibleText
        FROM prayers p
        JOIN users u ON p.userId = u.id
        LEFT JOIN prayer_bible pb ON p.id = pb.prayerId
        LEFT JOIN (
          SELECT 't_kjv' AS version, b, c, v, t FROM t_kjv
          UNION ALL
          SELECT 't_cn', b, c, v, t FROM t_cn
        ) b ON pb.version = b.version AND pb.b = b.b AND pb.c = b.c AND pb.v = b.v
        WHERE p.is_private = FALSE
        ORDER BY p.created_at DESC`;
        
      const [rows] = await bibleDB.execute(sql);
      
      // Êï¥ÁêÜÊï∞ÊçÆÔºåÂ∞ÜÁõ∏ÂêåÁ•∑ÊñáÁöÑÂÖ≥ËÅîÁªèÊñáÂêàÂπ∂Âà∞‰∏Ä‰∏™Êï∞ÁªÑ‰∏≠
      const prayers = {};
      rows.forEach(row => {
        if (!prayers[row.id]) {
          prayers[row.id] = {
            id: row.id,
            title: row.title,
            content: row.content,
            is_private: Boolean(row.is_private),
            created_at: row.created_at,
            username: row.username,
            verses: []
          };
        }
        if (row.bibleText) {
          prayers[row.id].verses.push({
            version: row.version,
            b: row.b,
            c: row.c,
            v: row.v,
            text: row.bibleText
          });
        }
      });
      
      res.json({ prayers: Object.values(prayers) });
    } catch (error) {
      console.error("‚ùå Error fetching public prayers:", error);
      res.status(500).json({ error: "Server error" });
    }
  });


module.exports = router;
